{
	"info": {
		"_postman_id": "1783f2e3-5205-40b8-8bbd-86e996302d08",
		"name": "Trello API BART",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31237054"
	},
	"item": [
		{
			"name": "Board",
			"item": [
				{
					"name": "Create a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a board name\r",
									"const boardName = pm.variables.replaceIn('{{$randomWord}}')\r",
									"\r",
									"//Set generated name to a boardName variable\r",
									"pm.variables.set('boardName', boardName)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify name variable from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"boardName\" variable', ()=>{\r",
									"    const requestBoardName = pm.variables.get('boardName')\r",
									"    pm.expect(respBody.name).to.eq(requestBoardName)\r",
									"})\r",
									"\r",
									"//Set \"name\" and \"id\" from response to collection variables\r",
									"pm.collectionVariables.set('boardName',respBody.name)\r",
									"pm.collectionVariables.set('boardId',respBody.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/?name={{boardName}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Label on a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a label name\r",
									"const labelName = pm.variables.replaceIn('{{$randomWord}}')\r",
									"\r",
									"//Set generated label name to a collection variable\r",
									"pm.collectionVariables.set('labelName', labelName)\r",
									"\r",
									"//Choose label color from array of colors\r",
									"const colorArray = ['green', 'yellow', 'orange', 'red', 'purple', 'blue', 'sky', 'lime', 'pink', 'black' ]\r",
									"const labelColor = _.sample(colorArray)\r",
									"\r",
									"//Set choosen color to a collection variable\r",
									"pm.collectionVariables.set('labelColor', labelColor)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify label name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"labelName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('labelName'))\r",
									"})\r",
									"\r",
									"//Verify label color from response body\r",
									"pm.test('Response \"color\" variable should be equal to \"labelColor\" variable', ()=>{\r",
									"    pm.expect(respBody.color).to.eq(pm.collectionVariables.get('labelColor'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/labels?name={{labelName}}&color={{labelColor}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"labels"
							],
							"query": [
								{
									"key": "name",
									"value": "{{labelName}}"
								},
								{
									"key": "color",
									"value": "{{labelColor}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get collection variables - boardName and boardId\r",
									"pm.collectionVariables.get('boardName')\r",
									"pm.collectionVariables.get('boardId')\r",
									"\r",
									"//Catch a response\r",
									"const respBody = pm.response.json();\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Verify board id from response body\r",
									"pm.test('Response \"boardId\" variable should be equal to \"boardId\" variable', ()=>{\r",
									"    pm.expect(respBody.id).to.eql(pm.collectionVariables.get('boardId'));\r",
									"})\r",
									"\r",
									"//Verify board name from response body\r",
									"pm.test('Response \"boardName\" variable should be equal to \"boardName\"', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('boardName'))\r",
									"})\r",
									"\r",
									"//Important! If we have 2 labels with the same color, in response is only 1 key with this color :)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for an updated board name\r",
									"const updatedBoardName = pm.variables.replaceIn('{{$randomWord}}')\r",
									"\r",
									"//Set generated name boardNameUpdate to a collection variable\r",
									"pm.collectionVariables.set('updatedBoardName', updatedBoardName)\r",
									"\r",
									"//Generate random description for a board\r",
									"const boardDesc = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"\r",
									"//Set generated description to a collection variable\r",
									"pm.collectionVariables.set('boardDesc', boardDesc)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"updatedBoardName\" variable', ()=>{\r",
									"    const requestBoardName = pm.variables.get('updatedBoardName')\r",
									"    pm.expect(respBody.name).to.eq(requestBoardName)\r",
									"})\r",
									"\r",
									"//Verify descritpion from response body\r",
									"pm.test('Response \"desc\" variable should be equal to \"boardDesc\" variable', ()=>{\r",
									"    const requestBoardDesc = pm.variables.get('boardDesc')\r",
									"    pm.expect(respBody.desc).to.eq(requestBoardDesc)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedBoardName}}\",\r\n    \"desc\": \"{{boardDesc}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List",
			"item": [
				{
					"name": "Create a List on a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a list name\r",
									"const listName = pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
									"\r",
									"//Set generated listName to a collection variable\r",
									"pm.collectionVariables.set('listName', listName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify list name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"listName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('listName'))\r",
									"})\r",
									"\r",
									"// Set \"id\" from response to collection variables\r",
									"pm.collectionVariables.set('listId', respBody.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}/lists?name={{listName}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{listName}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify list name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"listName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('listName'))\r",
									"})\r",
									"\r",
									"//Verify list id from response body\r",
									"pm.test('Response \"id\" variable should be equal to \"listId\" variable', ()=>{\r",
									"    pm.expect(respBody.id).to.eq(pm.collectionVariables.get('listId'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}lists/{{listId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}lists"
							],
							"path": [
								"{{listId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for an updated list name\r",
									"const updatedListName = pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
									"\r",
									"//Set generated name updatedListName to a collection variable\r",
									"pm.collectionVariables.set('updatedListName', updatedListName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify list name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"updatedListName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('updatedListName'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{updatedListName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}lists/{{listId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}lists"
							],
							"path": [
								"{{listId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card",
			"item": [
				{
					"name": "Create a new Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a card name\r",
									"const cardName = pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
									"\r",
									"//Set generated name cardName to a collection variable\r",
									"pm.collectionVariables.set('cardName', cardName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify list name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"cardName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('cardName'))\r",
									"})\r",
									"\r",
									"//Set \"id\" from response body to cardId variable\r",
									"pm.collectionVariables.set('cardId', respBody.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{cardName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}cards?idList={{listId}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{listId}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new Label on a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a card label name\r",
									"const cardLabelName = pm.variables.replaceIn('{{$randomWord}}')\r",
									"\r",
									"//Set generated label name to a collection variable\r",
									"pm.collectionVariables.set('cardLabelName', cardLabelName)\r",
									"\r",
									"//Choose label color from array of colors\r",
									"const colorArray = ['green', 'yellow', 'orange', 'red', 'purple', 'blue', 'sky', 'lime', 'pink', 'black' ]\r",
									"const cardLabelColor = _.sample(colorArray)\r",
									"\r",
									"//Set choosen color to a collection variable\r",
									"pm.collectionVariables.set('cardLabelColor', cardLabelColor)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Veryfiy board id from response body\r",
									"pm.test('Response \"idBoard\" variable should be equal to \"cardId\" variable', ()=>{\r",
									"    pm.expect(respBody.idBoard).to.eq(pm.collectionVariables.get('boardId'))\r",
									"})\r",
									"\r",
									"//Veryfiy lable name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"cardLabelName\"', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('cardLabelName'))\r",
									"})\r",
									"\r",
									"//Veryfiy lable color from response body\r",
									"pm.test('Response \"color\" variable should be equal to \"card\"', ()=>{\r",
									"    pm.expect(respBody.color).to.eq(pm.collectionVariables.get('cardLabelColor'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}/labels?color={{cardLabelColor}}&name={{cardLabelName}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}",
								"labels"
							],
							"query": [
								{
									"key": "color",
									"value": "{{cardLabelColor}}"
								},
								{
									"key": "name",
									"value": "{{cardLabelName}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Veryfiy id from response body\r",
									"pm.test('Response \"id\" variable should be equal to \"cardId\" variable', ()=>{\r",
									"    pm.expect(respBody.id).to.eq(pm.collectionVariables.get('cardId'))\r",
									"})\r",
									"\r",
									"//Veryfiy name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"cardName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('cardName'))\r",
									"})\r",
									"\r",
									"//Verify closed status from response body\r",
									"pm.test('Response \"closed\" variable should be equal to \"cardName\"', ()=>{\r",
									"    pm.expect(respBody.closed).to.eq(false)\r",
									"})\r",
									"\r",
									"//Verify label name on a card\r",
									"pm.test('Response \"label[0].name\" variable should be equal to \"cardLabelName\" variable', ()=>{\r",
									"    pm.expect(respBody.labels[0].name).to.eq(pm.collectionVariables.get('cardLabelName'))\r",
									"})\r",
									"\r",
									"//Verify label color on a car\r",
									"pm.test('Response \"label[0].color\" variable should be equal to \"cardLabelColor\" variable', ()=>{\r",
									"    pm.expect(respBody.labels[0].color).to.eq(pm.collectionVariables.get('cardLabelColor'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new comment to a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for comment section\r",
									"const commentText = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"\r",
									"//Set generated text to a collection variable\r",
									"pm.collectionVariables.set('commentText', commentText)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Veryfiy board id from response body\r",
									"pm.test('Response \"board.id\" variable should be equal to \"boardId\" variable', ()=>{\r",
									"    pm.expect(respBody.data.board.id).to.eq(pm.collectionVariables.get('boardId'))\r",
									"})\r",
									"\r",
									"//Veryfiy board name from response body\r",
									"pm.test('Response \"board.name\" variable should be equal to \"updatedBoardName\" variable', ()=>{\r",
									"    pm.expect(respBody.data.board.name).to.eq(pm.collectionVariables.get('updatedBoardName'))\r",
									"})\r",
									"\r",
									"//Veryfiy list id from response body\r",
									"pm.test('Response \"list.id\" variable should be equal to \"listId\" variable', ()=>{\r",
									"    pm.expect(respBody.data.list.id).to.eq(pm.collectionVariables.get('listId'))\r",
									"})\r",
									"\r",
									"//Veryfiy list name from response body\r",
									"pm.test('Response \"list.name\" variable should be equal to \"updatedListName\" variable', ()=>{\r",
									"    pm.expect(respBody.data.list.name).to.eq(pm.collectionVariables.get('updatedListName'))\r",
									"})\r",
									"\r",
									"//Veryfiy card id from response body\r",
									"pm.test('Response \"card.id\" variable should be equal to \"cardId\" variable', ()=>{\r",
									"    pm.expect(respBody.data.card.id).to.eq(pm.collectionVariables.get('cardId'))\r",
									"})\r",
									"\r",
									"//Veryfiy list name from response body\r",
									"pm.test('Response \"card.name\" variable should be equal to \"cardName\" variable', ()=>{\r",
									"    pm.expect(respBody.data.card.name).to.eq(pm.collectionVariables.get('cardName'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}/actions/comments?text={{commentText}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "{{commentText}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for an updated list name\r",
									"const updatedCardName = pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
									"\r",
									"//Set generated name updatedCardName to a collection variable\r",
									"pm.collectionVariables.set('updatedCardName', updatedCardName)\r",
									"\r",
									"//Generate random text for a description\r",
									"const updatedCardDesc = pm.variables.replaceIn('{{$randomLoremParagraph}}')\r",
									"\r",
									"//Set generated text to a collection variable\r",
									"pm.collectionVariables.set('updatedCardDesc', updatedCardDesc)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Veryfiy card name from response body\r",
									"pm.test('Response \"board.id\" variable should be equal to \"updatedCardName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('updatedCardName'))\r",
									"})\r",
									"\r",
									"//Veryfiy card desc from response body\r",
									"pm.test('Response \"desc\" variable should be equal to \"updatedCardDesc\" variable', ()=>{\r",
									"    pm.expect(respBody.desc).to.eq(pm.collectionVariables.get('updatedCardDesc'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}?name={{updatedCardName}}&desc={{updatedCardDesc}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{updatedCardName}}"
								},
								{
									"key": "desc",
									"value": "{{updatedCardDesc}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checklist",
			"item": [
				{
					"name": "Create a Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a checklist name\r",
									"const checklistName = pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
									"\r",
									"//Set generated name to a collection variable\r",
									"pm.collectionVariables.set('checklistName', checklistName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify checklist name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"checklistName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('checklistName'))\r",
									"\r",
									"})\r",
									"\r",
									"//Verify board id from response body\r",
									"pm.test('Response \"idBoard\" variable should be equal to \"boardId\" variable', ()=>{\r",
									"    pm.expect(respBody.idBoard).to.eq(pm.collectionVariables.get('boardId'))\r",
									"})\r",
									"\r",
									"//Verify card id from response body\r",
									"pm.test('Response \"idCard\" variable should be equal to \"cardId\" variable', ()=>{\r",
									"    pm.expect(respBody.idCard).to.eq(pm.collectionVariables.get('cardId'))\r",
									"})\r",
									"\r",
									"//Set \"id\" from response body to checklistId variable\r",
									"pm.collectionVariables.set('checklistId', respBody.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}checklists?idCard={{cardId}}&name={{checklistName}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"query": [
								{
									"key": "idCard",
									"value": "{{cardId}}"
								},
								{
									"key": "name",
									"value": "{{checklistName}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify checklist id from response body\r",
									"pm.test('Response \"id\" variable should be equal to \"checklistId\" variable', ()=>{\r",
									"    pm.expect(respBody.id).to.eq(pm.collectionVariables.get('checklistId'))\r",
									"\r",
									"})\r",
									"\r",
									"//Verify checklist name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"checklistName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('checklistName'))\r",
									"\r",
									"})\r",
									"\r",
									"//Verify card id from response body\r",
									"pm.test('Response \"idCard\" variable should be equal to \"cardId\" variable', ()=>{\r",
									"    pm.expect(respBody.idCard).to.eq(pm.collectionVariables.get('cardId'))\r",
									"})\r",
									"\r",
									"//Verify board id from response body\r",
									"pm.test('Response \"idBoard\" variable should be equal to \"boardId\" variable', ()=>{\r",
									"    pm.expect(respBody.idBoard).to.eq(pm.collectionVariables.get('boardId'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Checkitem on Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate random text for a checkitem name\r",
									"const checkItemName = pm.variables.replaceIn('{{$randomLoremSentence}}')\r",
									"\r",
									"//Set generated name to a collection variable\r",
									"pm.collectionVariables.set('checkItemName', checkItemName)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify checkitem name from response body\r",
									"pm.test('Response \"name\" variable should be equal to \"checkItemName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('checkItemName'))\r",
									"})\r",
									"\r",
									"//Verify checklist id from response body\r",
									"pm.test('Response \"idChecklist\" variable should be equal to \"checklistId\" variable', ()=>{\r",
									"    pm.expect(respBody.idChecklist).to.eq(pm.collectionVariables.get('checklistId'))\r",
									"})\r",
									"\r",
									"//Set \"id\" from response body to checklistId variable\r",
									"pm.collectionVariables.set('checkItemId', respBody.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}/checkItems?name={{checkItemName}}&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}",
								"checkItems"
							],
							"query": [
								{
									"key": "name",
									"value": "{{checkItemName}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a checkItem on a Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify if checklist is complete\r",
									"pm.test('Response \"state\"variable should be equal to \"complete\" ', ()=>{\r",
									"    pm.expect(respBody.state).to.eq('complete')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}/checkItem/{{checkItemId}}?state=complete&key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}",
								"checkItem",
								"{{checkItemId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "complete"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Checkitems on a Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Catch a response\r",
									"const respBody = pm.response.json()\r",
									"\r",
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"//Verify checkItem id from response\r",
									"pm.test('Response \"id\" variable should be equal to \"checkItemId\" variable', ()=>{\r",
									"    pm.expect(respBody.id).to.eq(pm.collectionVariables.get('checkItemId'))\r",
									"})\r",
									"\r",
									"//Verify checkItem name from response\r",
									"pm.test('Response \"name\" variable should be equal to \"checkItemName\" variable', ()=>{\r",
									"    pm.expect(respBody.name).to.eq(pm.collectionVariables.get('checkItemName'))\r",
									"})\r",
									"\r",
									"//Verify if checklist is complete\r",
									"pm.test('Response \"state\"variable should be equal to \"complete\" ', ()=>{\r",
									"    pm.expect(respBody.state).to.eq('complete')\r",
									"})\r",
									"\r",
									"//Verify checklist id from response\r",
									"pm.test('Response \"idChecklist\" variable should be equal to \"checklistId\" variable', ()=>{\r",
									"    pm.expect(respBody.idChecklist).to.eq(pm.collectionVariables.get('checklistId'))\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}/checkItems/{{checkItemId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}",
								"checkItems",
								"{{checkItemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete Checkitem from Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}/checkItems/{{checkItemId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}",
								"checkItems",
								"{{checkItemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Checkitems on a Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 404', ()=>{\r",
									"    pm.response.to.have.status(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}/checkItems/{{checkItemId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}",
								"checkItems",
								"{{checkItemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 404', ()=>{\r",
									"    pm.response.to.have.status(404)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}checklists/{{checklistId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}checklists"
							],
							"path": [
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 404', ()=>{\r",
									"    pm.response.to.have.status(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}cards/{{cardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}cards"
							],
							"path": [
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Verify status code \r",
									"pm.test('Response status should be 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}boards/{{boardId}}?key={{APIKey}}&token={{Token}}",
							"host": [
								"{{baseURL}}boards"
							],
							"path": [
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{Token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APIKey",
			"value": "Your API Key",
			"type": "string"
		},
		{
			"key": "Token",
			"value": "Your Token",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": "https://api.trello.com/1/",
			"type": "string"
		},
		{
			"key": "boardName",
			"value": ""
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "labelName",
			"value": ""
		},
		{
			"key": "labelColor",
			"value": ""
		},
		{
			"key": "boardNameUpdate",
			"value": ""
		},
		{
			"key": "boardDesc",
			"value": ""
		},
		{
			"key": "updatedBoardName",
			"value": ""
		},
		{
			"key": "listName",
			"value": ""
		},
		{
			"key": "listId",
			"value": ""
		},
		{
			"key": "updatedListName",
			"value": ""
		},
		{
			"key": "cardName",
			"value": ""
		},
		{
			"key": "cardId",
			"value": ""
		},
		{
			"key": "cardColor",
			"value": ""
		},
		{
			"key": "cardLabelName",
			"value": ""
		},
		{
			"key": "cardLabelColor",
			"value": ""
		},
		{
			"key": "commentText",
			"value": ""
		},
		{
			"key": "updatedCardName",
			"value": ""
		},
		{
			"key": "updatedCardDesc",
			"value": ""
		},
		{
			"key": "checklistName",
			"value": ""
		},
		{
			"key": "checklistId",
			"value": ""
		},
		{
			"key": "checkItemName",
			"value": ""
		},
		{
			"key": "checkItemId",
			"value": ""
		},
		{
			"key": "dueToCheckItem",
			"value": ""
		}
	]
}